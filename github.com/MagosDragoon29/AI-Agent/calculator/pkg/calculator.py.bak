class Calculator:
    def __init__(self):
        self.precedence = {
            '+': 2,
            '*': 1
        }

    def calculate(self, expression):
        # Basic Shunting-Yard algorithm for parsing and evaluation
        output_queue = []
        operator_stack = []
        tokens = expression.split()

        for token in tokens:
            if token.isdigit():
                output_queue.append(int(token))
            elif token in self.precedence:
                while (operator_stack and operator_stack[-1] in self.precedence and
                       self.precedence[token] <= self.precedence[operator_stack[-1]]):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                operator_stack.pop()  # Remove the '('

        while operator_stack:
            output_queue.append(operator_stack.pop())

        # Evaluation of the postfix expression
        eval_stack = []
        for token in output_queue:
            if isinstance(token, int):
                eval_stack.append(token)
            elif token in self.precedence:
                operand2 = eval_stack.pop()
                operand1 = eval_stack.pop()
                if token == '+':
                    eval_stack.append(operand1 + operand2)
                elif token == '*':
                    eval_stack.append(operand1 * operand2)

        return eval_stack[0]


if __name__ == '__main__':
    calculator = Calculator()
    expression = "3 + 7 * 2"
    result = calculator.calculate(expression)
    print(f"{expression} = {result}")
